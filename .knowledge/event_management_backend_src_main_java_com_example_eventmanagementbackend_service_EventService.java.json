{"is_source_file": true, "format": "Java", "description": "This file defines the EventService class, which handles business logic related to Event operations such as create, update, delete, and retrieval in an event management backend.", "external_files": ["com/example/eventmanagementbackend/dto/EventRequest", "com/example/eventmanagementbackend/exception/EventNotFoundException", "com/example/eventmanagementbackend/exception/InvalidEventTimeException", "com/example/eventmanagementbackend/model/Event", "com/example/eventmanagementbackend/repository/EventRepository"], "external_methods": ["repository.save(Event)", "repository.findById(Long)", "repository.existsById(Long)", "repository.deleteById(Long)", "repository.findAll()", "request.getStartTime()", "request.getEndTime()", "request.getName()", "request.getDescription()", "request.getLocation()", "event.setName(String)", "event.setDescription(String)", "event.setStartTime(LocalDateTime)", "event.setEndTime(LocalDateTime)"], "published": ["create", "update", "delete", "getById", "listAll"], "classes": [{"name": "EventService", "description": "Service layer that manages business logic for event operations such as creating, updating, deleting, and retrieving events."}], "methods": [{"name": "create", "description": "Creates a new Event based on the request, validates times, and saves it to the repository."}, {"name": "update", "description": "Updates an existing Event identified by ID with data from the request after validation."}, {"name": "delete", "description": "Deletes an event by its ID after checking for existence."}, {"name": "getById", "description": "Retrieves an Event by its ID, throws exception if not found."}, {"name": "listAll", "description": "Returns a list of all events."}, {"name": "validateTimes", "description": "Checks that end time is after start time in the request."}, {"name": "apply", "description": "Copies data from EventRequest to an Event entity."}], "calls": ["repository.save(Event)", "repository.findById(Long)", "repository.existsById(Long)", "repository.deleteById(Long)", "repository.findAll()", "request.getStartTime()", "request.getEndTime()", "request.getName()", "request.getDescription()", "request.getLocation()", "event.setName(String)", "event.setDescription(String)", "event.setStartTime(LocalDateTime)", "event.setEndTime(LocalDateTime)"], "search-terms": ["EventService", "business logic", "create event", "update event", "delete event", "get event", "list events", "validate event times", "apply request to event"], "state": 2, "file_id": 14, "knowledge_revision": 31, "git_revision": "", "hash": "716efbb7de8918cb708977c01943ee74", "format-version": 4, "code-base-name": "event_management_backend", "filename": "event_management_backend/src/main/java/com/example/eventmanagementbackend/service/EventService.java", "revision_history": [{"31": ""}]}